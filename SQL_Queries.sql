create database CoffeeAnalytics;
use CoffeeAnalytics;
create table products(product_id varchar(10) primary key,product_category varchar(100),product_type varchar(50));
create table stores(store_id varchar(20) primary key,store_location varchar(100));
create table Transactions(transaction_id varchar(20) primary key,transaction_date varchar(20),transaction_time time,product_id varchar(10),store_id varchar(20),quantity int,unit_price decimal(10,2),
foreign key(product_id) references products(product_id),foreign key(store_id) references stores(store_id));
alter table transactions modify column transaction_date date;
-- =====================================================================
-- What is the total revenue generated by each store?
-- =====================================================================
create view store_revenue as
select s.store_id,s.store_location,sum(t.quantity*t.unit_price) as total_revenue
from transactions t
join stores s on s.store_id=t.store_id
group by s.store_id,s.store_location;
-- query to view the total revenue genrated for each store
select * from store_revenue;
-- =====================================================================
-- "Which are the top 5 best-selling products based on quantity sold?"
-- =====================================================================
create view top_5_products as
select p.product_id,p.product_category,p.product_type,count(t.quantity) as quantity_sold
from products p
join transactions t on p.product_id=t.product_id
group by p.product_id,p.product_category,p.product_type;
-- query the view to find the top 5 products according to quantity sold
select * from top_5_products
order by quantity_sold desc
limit 5;
-- =====================================================================
-- "Which store has the highest number of transactions?"
-- =====================================================================
create view highest_transactions_stores as
select s.store_id,s.store_location,count(t.transaction_id) as total_transactions
from stores s join transactions t
on s.store_id=t.store_id
group by s.store_id,s.store_location;
-- Query the view to find the store with the most transactions
select * from highest_transactions_stores
order by total_transactions desc
limit 1;
-- =====================================================================
-- "What is the daily revenue trend for all stores combined?"
-- =====================================================================
create view daily_revenue as
select transaction_date,sum(quantity*unit_price) as monthy_revenue
from transactions
group by transaction_date
order by transaction_date;
-- query the view to see daily revenue
select * from daily_revenue;
-- =====================================================================
-- Which product categories generated the highest revenue?
-- =====================================================================
create view highest_revenue_products as
select p.product_category,sum(t.quantity*t.unit_price) as total_revenue
from products p join transactions t 
on p.product_id=t.product_id
group by p.product_category;
-- query the view to see highest revenue products
select * from highest_revenue_products
order by total_revenue desc
limit 3;
-- =====================================================================
-- “What is the average transaction value per store?”
-- =====================================================================
create view average_transaction_value as
select s.store_id,s.store_location,round(sum(t.quantity*t.unit_price)/count(t.transaction_id),2) as average_value 
from stores s join transactions  t on s.store_id=t.store_id
group by s.store_id,s.store_location;
-- query the view to see the average value per transaction
select * from average_transaction_value;
-- =====================================================================
-- “Which store sold the most units overall?”
-- =====================================================================
create view total_units_sold as
select s.store_id,s.store_location,sum(t.quantity) as units_sold
from stores s join transactions t on s.store_id=t.store_id
group by s.store_id,s.store_location
order by units_sold desc;
-- query the view to see total units sold
select * from total_units_sold;
-- ================================================================================
-- “Which products were sold by each store, and how many units of each were sold?”
-- ================================================================================
create view store_product_sales_summary as 
select s.store_id,s.store_location,p.product_id,p.product_category,sum(t.quantity) as units_Sold
from transactions t 
join stores s on s.store_id=t.store_id
join products p on p.product_id=t.product_id
group by s.store_id,s.store_location,p.product_id,p.product_category
order by s.store_id,units_sold desc;
-- query the view to see which products were sold for store 3
select * from store_product_sales_summary where store_id=3;
-- ================================================================================
-- Which product category generated the highest total revenue?”
-- ================================================================================
create view ranked_products_by_revenue as 
select row_number() over (order by sum(t.quantity*t.unit_price)desc) as product_rank,
p.product_id,p.product_category,sum(t.quantity*t.unit_price) as total_revenue
from products p join transactions t on p.product_id=t.product_id
group by p.product_id,p.product_category;
-- query the view to see top 5 rank products according to revenue
select * from ranked_products_by_revenue
where product_rank<=5;
-- ================================================================================
-- “Which store–product category combinations generated the most revenue?”
-- ================================================================================
create view store_product_sales as 
select s.store_id,s.store_location,p.product_category,sum(t.quantity*t.unit_price) as total_revenue
from transactions t 
join stores s on s.store_id=t.store_id
join products p on p.product_id=t.product_id
group by s.store_id,s.store_location,p.product_category
order by s.store_id,total_revenue desc;
-- query the view to see top store-product category combinations
select * from store_product_sales;
-- query the view to see top selling product category for each store
select store_id,product_category,row_number() over(partition by store_id order by total_revenue desc) as category_rank
from store_product_sales;
-- ================================================================================
-- Total transactions and revenue according to product category
-- ================================================================================
CREATE VIEW category_sales_summary AS
SELECT p.product_category,COUNT(t.transaction_id) AS total_transactions,SUM(t.quantity * t.unit_price) AS total_revenue
FROM transactions t
JOIN products p ON t.product_id = p.product_id
GROUP BY p.product_category;
